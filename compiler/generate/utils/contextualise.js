// Simple utility for walking an ESTree-compliant AST, such as one generated by acorn.
// 一个简单的实用程序，用于行走符合ESTree的AST，例如acron生成的AST。
import { walk } from 'estree-walker'
import isReference from './isReference.js'
import flattenReference from './flattenReference.js'

export default function contextualise(code, expression, contexts, indexes, helpers, isEventHandler) {
  const usedContexts = []

  walk(expression, {
    enter(node, parent) {
      if (isReference(node, parent)) {
        const { name } = flattenReference(node)

        if (parent && parent.type === 'CallExpression' && node === parent.callee) {
          if (helpers[name]) code.insertRight(node.start, `template.helpers.`)
          return
        }

        if (name === 'event' && isEventHandler) {
          return
        }

        if (contexts[name]) {
			// ~x=-(x+1)
			// ~['x'].indexOf('x') 永远返回<0的数字，等于0说明不存在。
			// !0又会转为false，所以!~['x'].indexOf('x')可以判断是否存在于数组。
          if (!~usedContexts.indexOf(name)) usedContexts.push(name)
        } else if (indexes[name]) {
          const context = indexes[name]
          if (!~usedContexts.indexOf(context)) usedContexts.push(context)
        } else {
          code.insertRight(node.start, `root.`)
          if (!~usedContexts.indexOf('root')) usedContexts.push('root')
        }
        // this.skip是跳过当前节点的遍历（包括子节点和leave钩子）
        this.skip()
      }
    },
  })

  return usedContexts
}
